import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.Math;
import java.util.Scanner;
import java.io.*;
import java.util.*;
import java.util.StringTokenizer;

public class Sollution1 {
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		FastReader sc = new FastReader();
		BufferedWriter ou = new BufferedWriter(new OutputStreamWriter(System.out));
		// Start coding
		int n = sc.nextInt();
		int move = 0;
		//sc.nextLine();
		char[]now=sc.next().toCharArray();
		char[]code=sc.next().toCharArray();
		for(int i= 0;i<n;i++) {
			int nowint = Character.getNumericValue(now[i]);
			int codeint = Character.getNumericValue(code[i]);
			if(Math.abs(nowint-codeint)>=5) {
				move = move + (10-Math.max(nowint, codeint)) + Math.min(nowint, codeint);
			}else {
				move = move + Math.abs(nowint-codeint);
			}
		}
		ou.write(move +"\n");
		ou.flush();
	}
}