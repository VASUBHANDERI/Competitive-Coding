import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.Math;
import java.util.Scanner;
import java.io.*;
import java.util.StringTokenizer;

public class Sollution1 {
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		FastReader sc = new FastReader();
		BufferedWriter ou = new BufferedWriter(new OutputStreamWriter(System.out));
	    int t = sc.nextInt();
		for (int o = 0; o < t; o++) {
			int n = sc.nextInt();
			int[]a =new int[n];
			for(int i = 0; i<n;i++) {
				a[i]=sc.nextInt();
			}
			int maxi=0;
			int mini=0;
			int max = 0;
			int min = a[0];
			for(int i = 0;i<n;i++) {
				if(a[i]>max) {
					max=a[i];
					maxi=i;
				}else if(a[i]<min) {
					min = a[i];
					mini= i;
				}
			}
			int minindex = Math.min(mini, maxi);
			int maxindex = Math.max(mini, maxi);
			int m1 = (minindex +1)+(n-maxindex);
			int m2 = maxindex + 1; 
			int m3 = (n-minindex);
			int smallest = Math.min(m1, m2);
			ou.write(Math.min(smallest, m3) +"\n");
		}
		ou.flush();
	}
}